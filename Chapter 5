# ðŸ›’ Smart Shopping Assistant â€“ Mini Console Project

Youâ€™ve just completed **Chapterâ€¯5**, which introduced the expressive power of *Higher-Order Functions* and composition in Haskell:

1. **Higher-order functions**
2. `filter`, `any`, and `map`
3. **Lambda functions** (`\x -> ...`)
4. **Precedence and associativity**
5. **Curried functions** & **partial application**
6. **Function application & composition**
7. The `$` and `.` operators
8. **Point-free style**

This marathon challenges you to design a smart **command-line shopping assistant** that helps users filter, analyze, and transform product data using a pure, functional style.

---

### ðŸŽ¯ Objectives

* **Use `filter` and `any`** to allow users to:
  - View products by category or price range
  - Check if *any* items meet a certain deal (e.g., under â‚¦1000)
* **Introduce lambda expressions** for quick inline filtering and sorting.
* **Apply currying and partial application** to predefine reusable filters (e.g., `cheapItems`, `electronicsOnly`).
* **Compose transformations** using `.` to build pipelines like:
  - `map show . filter expensive`
* **Replace parentheses with `$`** to reduce visual clutter in nested calls.
* **Use point-free style** where natural for elegance (e.g., `totalPrice = sum . map price`).
* **Respect associativity and precedence** in building pipelines clearly and correctly.

---

### ðŸ§ª What to Deliver

Build a console app that lets users:

- Enter a shopping list (products with name, price, and category)
- Apply filters interactively (e.g., "all groceries under â‚¦2000")
- Get summaries like total cost, item count, and cheapest/most expensive item
- View which filters matched using readable output

---

### ðŸ’¡ Bonus Challenges

- Add a function to **tag discount items** using lambda + map
- Compose a price analyzer using function composition alone
- Create **default filters** using curried and partially applied functions

---

### ðŸ“¦ Build Instructions

1. Build and test using **GHCi**
2. Package with **Stack** or **Cabal**
3. Include sample sessions and usage notes in your **README**
